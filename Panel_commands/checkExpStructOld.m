function checkExpStruct(expSt, direc)

% function checkExpStruct(expSt)
% This functions checks that there are no obvious mistakes in the expStruct
% structure, and prints a text report into the working directory. The
% checks include:
% 1) printing the names of the pattern and the posfunc of each protocol
% 2) checking that posFunc for x are designated for x and y for y
% 3) checking that posFunc x and y for the same protocol have the same
%    length
% 4) checking that the duration for stimulus presentation is not shorter
%    than 15secs
% 5) checking that the position function don't have values that exceed the
%    pattern matrix
% 6) checks that the date in expStruct match the file dates (no changes
%    were made in the pattern and posFunc files)
% 7) checks that all protocols have all the fields filled
% 
% INPUT
% expst - expStruct as generated by createExpStruct and
%         createProtocolScript (specific for each experiment). Should
%         contain 3 main fields: pattern, posFunc, and protocol.
%         pattern has name 
%                     x_frame - number of frames in X dimension
%                     y_frame - number of frames in Y dimension
%                     modDate - the last modified date that was on the file
%                               when expStruct was created
%         posFunc has name
%                     numUniqueVals - unique values in the vector
%                     length - length of vector
%                     relDim - dimension for which it was designed
%                     modDate - the last modified date that was on the file
%                               when expStruct was created
%         protocol has  PatternID - based on the pattern order
%                       InitialPosition
%                       Mode
%                       Gain
%                       PosFuncX - based on posFunc order
%                       PosFuncY - same
%                       FuncFreqX
%                       FuncFreqY
%                       Traits
%                       Category
%                       Duration - calculated based on length and frequency
%                       
%
% direc - (optional) directory in which the report would be printed. If
%          none is given the working directory is used

if nargin < 2
    direc = pwd;
end

 protocolFields =              {'PatternID',...        
                                'InitialPosition',...             
                                'Mode',...             
                                'Gain',...         
                                'PosFuncX',...  
                                'PosFuncY',...        
                                'FuncFreqX',...      
                                'FuncFreqY',...         
                                'Traits',... 
                                'Category', ...
                                'Duration',...     
                                }; 
% This list is used to evaluate whether the field has the right from
% 1- single number; 2- 1X2 matrix; 3- 1X4 matrix  
protocolFieldsType = [1,2,2,3,2,2,1,1,4,1,1];
rightSize = {1; [1 2]; [1 4]};


allFiles = dir(fullfile(direc, '*.mat'));
allNames = {allFiles(:).name};

numProtocols = numel(expSt.protocol);
errors = 0;
fhand = fopen(fullfile(direc, 'Report.txt'), 'w');
tempNames  = cell(1,3);
for ii=1:numProtocols
    
    fprintf(fhand, '%s\r\n', ['protocol ', num2str(ii)]);
    fprintf(fhand, '\r\n');
    
    missingFields = 0;
    % Checking all fields exist and are valid
    for jj=1:length(protocolFields)
        if ~isfield(expSt.protocol(ii), protocolFields{jj})
            fprintf(fhand, '%s %s %s\r\n','!!! protocol is missing field', protocolFields{jj}, '!!!');
            errors=errors+1;
            missingFields = missingFields+1;
            break
        end
        tempField = getfield(expSt.protocol(ii), protocolFields{jj});
        
        if protocolFieldsType(jj) < 4
            if ~prod(size(tempField) == rightSize{protocolFieldsType(jj)})
                fprintf(fhand, '%s %s %s\r\n','!!! protocol has wrong value in field', protocolFields{jj}, '!!!');
                errors=errors+1;
            end
        elseif protocolFieldsType(jj) == 4 % checks that traits are defined properly 
            tempCell = regexp(tempField, '[A-Za-z]{3}\d{2}', 'match');
            numTr = length(tempCell);
            if length(tempField) > (length([tempCell{:}]) + numTr -1)
                fprintf(fhand, '%s %s %s\r\n','!!! protocol traits are ill-defined', protocolFields{jj}, '!!!');
                errors=errors+1;
            end
        end
    end
    
    if missingFields
        continue
    end
    
    tempPat = expSt.protocol(ii).PatternID;
    tempXposFunc = expSt.protocol(ii).PosFuncX(2);
    tempYposFunc = expSt.protocol(ii).PosFuncY(2);
    
    tempTr = expSt.protocol(ii).Traits;
    tempNames{1} = expSt.pattern(tempPat).name;
    tempNames{2} = expSt.posFunc(tempXposFunc).name;
    tempNames{3} = expSt.posFunc(tempYposFunc).name;
    
    fprintf(fhand, '%s\r\n', tempTr);
    fprintf(fhand, '%s\r\n', tempNames{:});
    fprintf(fhand, '\r\n');
    
     % Checking that files didn't change
     filechange = 0;
     for jj=1:3
        fileNameInd = find(cellfun(@(x) strcmp(tempNames{jj}, x(1:(end-4))), allNames));
        
        if jj==1
            if ~strcmp(expSt.pattern(tempPat).modDate, allFiles(fileNameInd).date)
                fprintf(fhand, '%s\r\n','!!! pattern file has changed since the creation of expStruct !!!');
                filechange = filechange+1;
                errors = errors+1; 
            end
        elseif jj==2
            if ~strcmp(expSt.posFunc(tempXposFunc).modDate, allFiles(fileNameInd).date)
                fprintf(fhand, '%s\r\n','!!! posFunc file has changed since the creation of expStruct !!!');
                filechange = filechange+1;
                errors = errors+1;
            end
        elseif jj==3
            if ~strcmp(expSt.posFunc(tempYposFunc).modDate, allFiles(fileNameInd).date)
                fprintf(fhand, '%s\r\n','!!! posFunc file has changed since the creation of expStruct !!!');
                filechange = filechange+1;
                errors = errors+1;
            end
        end
     end
     
     if ~filechange
          fprintf(fhand, '%s\r\n', 'Files did not change since creation of expStruct');
     end
    
    
    %checking position functions are properly assigned
    
    if ~strcmp(expSt.posFunc(tempXposFunc).relDim, 'X')
        fprintf(fhand, '%s\r\n', '!!! X position function not specified for X !!!');
        errors = errors+1;
    end
    
    if ~strcmp(expSt.posFunc(tempYposFunc).relDim, 'Y')
        fprintf(fhand, '%s\r\n', '!!! Y position function not specified for Y !!!');
        errors = errors+1;
    end
    
    % checking that x and y position function are of the same length
    
    if expSt.posFunc(tempXposFunc).length ~= expSt.posFunc(tempYposFunc).length
        fprintf(fhand, '%s\r\n', '!!! position function are not of the same length !!!');
        errors = errors+1;
    end
    
    % checking that duration is not too short
    
    if expSt.protocol(ii).Duration < 5
         fprintf(fhand, '%s %4.2f%s\r\n', '!!! Duration is only', expSt.protocol(ii).Duration, 'secs !!!');
         errors = errors+1;
    end
        
    % checking that dimenstion are consistent between posFuncs and pattern
    
    tempPatX = expSt.pattern(tempPat).x_frames;
    tempPatY = expSt.pattern(tempPat).y_frames;
    
    tempXuvals = expSt.posFunc(tempXposFunc).numUniqueVals;
    tempYuvals = expSt.posFunc(tempYposFunc).numUniqueVals;
    
    if tempXuvals > tempPatX
      fprintf(fhand, '%s\r\n', '!!! X position function has more frames than pattern !!!');
      errors = errors+1;
    end
    
    if tempYuvals > tempPatY
      fprintf(fhand, '%s\r\n', '!!! Y position function has more frames than pattern !!!');
      errors = errors+1;
    end
    
    
    fprintf(fhand, '\r\n');
end
    

totDuration = sum([expSt.protocol(:).Duration])/60;
fprintf(fhand, '%s %4.2f%s\r\n', 'Total experiment duration', totDuration','mins');  

fclose(fhand);

if errors
    disp([num2str(errors), ' Errors found'])
end


end

