function maskIm = generateBaseMask(maskType, maskSize)


% maskIm = generateBaseMask(maskType, maskSize)
%
% This function generates a basic mask to be used with the grating patterns
% that are generated by generateGratingFrame. The mask can be either a
% circle, annulus or a square (maskType, given as a string), and will be set in the
% middle of the matSizXmatSiz matrix with a diameter/Edge of 2XmaskSize+1 pixels
%
% Note! for annulus maskSize should be a 2 element vector. Bigger number
% would be used for outer and smaller for inner
% Note! due to rotation symmetry circles are not available in all sizes
%
% OUTPUT
%
% maskIm -  225X225 matrix with the mask centered <(96+16)X2 + 1 full
% arena + biggest maskSize>


% these reduce or eliminate asymmetries in 45 degree rotations (radius,
% linspacesteps)

matSiz = 225;

maskType = lower(maskType);

switch maskType
    
    case 'square'
        
        maskIm = makeSquareMask(maskSize, matSiz);
        
    case 'circle'
        
        maskIm = makeCircleMask(maskSize, matSiz);
        
    case 'annulus'
        
        assert(length(maskSize) == 2, 'When type is annulus - maskSize should be a 2 element vector (R outer, R inner)')
        maskIm = makeAnnulusMask(max(maskSize), min(maskSize), matSiz);
        
    otherwise
        
        error('mask type must be either square, circle, or annulus')
        
end



end
