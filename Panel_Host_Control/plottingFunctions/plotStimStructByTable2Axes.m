function varargout = plotStimStructByTable2Axes(pStruct, figName, axeNames, colName, plotParSt)

% function varargout = plotStimStructByTable(pStruct, figDim, posDim, colDim, plotSt)
%
% This function is a modification of plotStimStructByDim. instead of using
% relInds/combInds it uses gratingTable. it is specifically designed for
% protocols where all the differences are generated by usign different
% gratings. 
% This functions plots the data in pStruct based on the separation in the
% different dimensions. pStruct should have a .stim field, and should work
% with getStimInds (have either a relInds or a combInds field). 
% 
% INPUTS
% pStruct -         protocol structure with .stim field and .data in it
% figName -         String. Dimension accorind to which data would be seperated
%                   into different figures (names are var names from gratingTable).
% axeName -         cell array with rowName and ColName in it. For each figure rows and columns will be determined
% colName -         same as above only to different colors within axes. 
%
% plotParSt -       (optional) structure with different parameters that
%                   will affect data plotting 
% .figPar -         fields within .figPar will be applied on each figure.
%                   if only one is given same paraemters will be applied on
%                   all figures generated. 
%                   figPar can contain the following fields:
%   .axesNum -      2 element vector to describe number of axes to plot on
%                   the X and Y dimensitons of each figure. default is
%                   [floor(sqrt(numAxesDim)), ceil(sqrt(numAxesDim))]
%   .axesOrd -      1XnumAxes vector describing the order in which axes are
%                   to be populated. Default is 1:numAxes
%   .cols -         2*numColDimX3 colors to be used in plotting the data
%                   for the figure. default pallete is cbrewer(Paired), to
%                   match mean and individual repeats. If input is just
%                   numColDimX3 mean and indiv are at the same color
%   .plotReps -     logical flag for plotting repeats
%
% if figPar is left empty for a particular figure it will be generated by
% default parameters.


%% verifying input correctness

close all


assert(isfield(pStruct, 'stim'), 'pStrcut is missing stim field')
%assert(isfield(pStruct.stim, 'data'), 'stim is missing data field')
assert(isfield(pStruct, 'gratingTable'), 'stim is missing gratingTable field')

relTable = pStruct.gratingTable;
colTableNames = relTable.Properties.VariableNames;

assert(iscell(axeNames), 'axesNames should be a 1X2 cell array')
assert(all(size(axeNames) == [1,2]), 'axesNames should be a 1X2 cell array')
assert(all(ismember([{figName}, axeNames, {colName}], colTableNames)), 'Given name does not match variable names in table')
assert(ismember('index', colTableNames), 'gratingTable is missing index variable')


figIndVals = unique(relTable{:, figName});
numFigs = length(figIndVals);


for ff=1:numFigs
    tempTab = relTable(relTable{:, figName} == figIndVals(ff), :);
    axeRowIndVals = unique(tempTab{:, axeNames{1}});
    axeColIndVals = unique(tempTab{:, axeNames{2}});
    colIndVals = unique(tempTab{:, colName});
    plotSt.figPar(ff).relAxeRowVal = axeRowIndVals;
    plotSt.figPar(ff).relAxeColVal = axeColIndVals;
    plotSt.figPar(ff).relColVal = colIndVals;
    plotSt.figPar(ff).relNumAxeRow = length(axeRowIndVals);
    plotSt.figPar(ff).relNumAxeCol = length(axeColIndVals);
    plotSt.figPar(ff).relNumCol = length(colIndVals);
    plotSt.figPar(ff).axesNum = [length(axeColIndVals), length(axeRowIndVals)];
    plotSt.figPar(ff).axesOrd = 1:prod(plotSt.figPar(ff).axesNum);
    plotSt.figPar(ff).cols = cbrewer('qual', 'Paired', 2*plotSt.figPar(ff).relNumCol); 
    plotSt.figPar(ff).plotReps = 1;
end


%% managing the plotParSt input
if nargin == 5
    assert(isfield(plotParSt, 'figPar'), 'plotParSt is missing figPar field')
    
    % if input structure has length one, apply parameters on all figures
    if length(plotParSt.figPar) == 1 && numFigs > 1
        for ff=2:numFigs
            plotParSt.figPar(ff) = plotParSt.figPar(1);
        end
    end
    
    for ff=1:numFigs
        if isfield(plotParSt.figPar, 'axesNum')
            if ~isempty(plotParSt.figPar(ff).axesNum)
                tempAxeNum = plotParSt.figPar(ff).axesNum;
                assert(length(tempAxeNum) == 2, 'axesNum input for fig %d has wrong dimension', ff)
                assert(prod(tempAxeNum) >= plotSt.figPar(ff).relNumAxeRow * plotSt.figPar(ff).relNumAxeCol, 'axesNum for fig %d is too small', ff)
                plotSt.figPar(ff).axesNum = tempAxeNum;
            end
        end
        
        if isfield(plotParSt.figPar, 'axesOrd')
            if ~isempty(plotParSt.figPar(ff).axesOrd)
                tempAxeOrd = plotParSt.figPar(ff).axesOrd;
                assert(length(tempAxeOrd) == plotSt.figPar(ff).relNumAxeRow * plotSt.figPar(ff).relNumAxeCol, ... 
                       'axes order for fig %d is not equal to number of axes', ff) % assumes the matrix of rowXcol is full - maybe change
                plotSt.figPar(ff).axesOrd = tempAxeOrd;
            end
        end
        
        if isfield(plotParSt.figPar, 'cols')
            if ~isempty(plotParSt.figPar(ff).cols)
                tempCols = plotParSt.figPar(ff).cols;
                assert(size(tempCols, 2) == 3, 'Color input should be a 3 element vector')
                assert(size(tempCols, 1) >= plotSt.figPar(ff).relNumCol, 'Colors in fig %d exceed colors inputs', ff)
                plotSt.figPar(ff).cols = tempCols;
            end
        end
        
        if isfield(plotParSt.figPar, 'plotReps')
            if ~isempty(plotParSt.figPar(ff).plotReps)
                tempRepsFlag = plotParSt.figPar(ff).plotReps;
                assert(ismember(tempRepsFlag, [0,1]), 'plotReps should be logical ')
                plotSt.figPar(ff).plotReps = tempRepsFlag;
            end
        end
    end
end
   
%% plotting the data

maxTime = 0;

for ff=1:numFigs
    
    handles.fig(ff).figH = figure;
    relAxe = plotSt.figPar(ff).axesNum;
    relOrd = plotSt.figPar(ff).axesOrd;
    relCol = plotSt.figPar(ff).cols;
    posCell = generatePositionCell(0.05, 0.975, 0.025, 0.95, 0.01, 0.01, relAxe);
    tempFigInd = relTable{:, figName} == figIndVals(ff);
    
    axeCount = 0;
    for ii=1:plotSt.figPar(ff).relNumAxeRow
        
        tempAxeRowInd = relTable{:, axeNames{1}} == plotSt.figPar(ff).relAxeRowVal(ii);
        tempAxeRowVal = plotSt.figPar(ff).relAxeRowVal(ii);
        
        for jj=1:plotSt.figPar(ff).relNumAxeCol
            
            axeCount= axeCount+1;
            tempAxeColInd = relTable{:, axeNames{2}} == plotSt.figPar(ff).relAxeColVal(jj);
            tempAxeColVal = plotSt.figPar(ff).relAxeColVal(jj);
            
            handles.fig(ff).axh(ii,jj) = axes('position', posCell{relOrd(axeCount)});
            hold on
        
            if 2*plotSt.figPar(ff).relNumCol == size(plotSt.figPar(ff).cols, 1)
                indvColInd = 1:2:2*plotSt.figPar(ff).relNumCol;
                meanColInd = 2:2:2*plotSt.figPar(ff).relNumCol;
            else
                indvColInd = 1:plotSt.figPar(ff).relNumCol;
                meanColInd = 1:plotSt.figPar(ff).relNumCol;
            end
        
            for kk=1:plotSt.figPar(ff).relNumCol
                
                tempColInd = relTable{:, colName} == plotSt.figPar(ff).relColVal(kk);
            
                rowInd = prod([tempFigInd, tempAxeRowInd, tempAxeColInd, tempColInd], 2);
                gratInd = relTable{logical(rowInd), 'index'};
                
                if isempty(gratInd)
                    continue
                end
                
                assert(length(gratInd) == 1, 'variable names combination does not provide unique identity in gratingTable')
            
                plotIndsSt = getStimInds(pStruct, [gratInd, nan, nan, nan]);
                plotInds = [plotIndsSt(:).inds];
                [datToPlot, timeToPlot] = getStimDataByInds(pStruct, plotInds);
            
                % with the way color are processed here it will not work with
                % regular color input
                if plotSt.figPar(ff).plotReps
                    plot(timeToPlot, datToPlot, 'lineWidth', 1, 'color', relCol(indvColInd(kk), :))
                end
            
                notNanInds = all(~isnan(timeToPlot), 2);
                meanTime = mean(timeToPlot(notNanInds, :),2);
            
                plot(meanTime, mean(datToPlot(notNanInds, :),2), 'lineWidth', 3, 'color', relCol(meanColInd(kk), :))
                
                if ii==1
                    title(num2str(tempAxeColVal))
                end
                
                if jj==1
                    ylabel(num2str(tempAxeRowVal))
                end
                
                if meanTime(end) > maxTime
                    maxTime =  meanTime(end);
                end
            end
            
        end
        
    end
    
end


allY = [];
for ff=1:numFigs
    allY = vertcat(allY, handles.fig(ff).axh(:).YLim);
end

totYLim = [min(allY(:,1)), max(allY(:,2))];

for ff=1:numFigs
    for ii=1:size(handles.fig(ff).axh, 1)
        for jj=1:size(handles.fig(ff).axh, 2)
            handles.fig(ff).axh(ii,jj).YLim = totYLim;
            handles.fig(ff).axh(ii,jj).XLim = [0, maxTime];
        end
    end
    
    midRow = ceil(ii/2);
    midCol = ceil(jj/2);
%     xxTick = handles.fig(ff).axh(1,1).XTick;
%     yyTick = handles.fig(ff).axh(1,1).YTick;
%     xxTickLab = handles.fig(ff).axh(1,1).XTickLabel;
%     yyTickLab = handles.fig(ff).axh(1,1).YTickLabel;
    
    set(handles.fig(ff).axh(:, 2:end), 'YTickLabel', [])
    set(handles.fig(ff).axh(1:end-1, :), 'XTickLabel', [])
    
    tempYLab = handles.fig(ff).axh(midRow, 1).YLabel.String;
    handles.fig(ff).axh(midRow, 1).YLabel.String = {axeNames{1}; tempYLab};
    
    tempXTit = handles.fig(ff).axh(1, midCol).Title.String;
    handles.fig(ff).axh(1, midCol).Title.String = {axeNames{2}; tempXTit};
    
end

        
if nargout == 1
    varargout{1} = handles;
end
    

end
