function expResults = runShortExperiment(direct, iniPos, protInds, freqXY, random)

% function data = runPanelExperiment(direct)
% This function runs the protocols generated by 'createExpStruct' and
% 'createProtocolsScript' and collects the gennerated data. 
% The function runs a session for each seperate protocol and saves after each one 
%
% INPUT
% direct -      relevant 'on_SDcard' directory in which expStruct is save and to which 
%               the generated data would be saved. expStruct is generated as
%               stated above, and should contain pattern, posFunc, and protocol
%               fields. It is also recommended to use 'checkExpStruct' to verify
%               that the protocols are referring to the right files. 
% iniPos -      offset to apply for protocols labeled with a [-1 1] initial position. 
%               in this version it is a single value for the x position
%               alone
% protInds -    vector of relevant protocol indices. if not given
%               the function will use all protocols defined as 'short' in 'type' field.
% freqXY -     (optional) Scalar. Default is 20Hz. 
% random -      logical (optional). Flag for whether the protocols should be 
%               presented in a random order or not. Default is random
%
% OUTPUT 
% shortExpInfo  -   saves several variable that are related to the experiment
% expResults -      data aquired for each protocol is an N X 5 matrix with N being 
%                   the number of samples, and 5 channels which are: 
%                   (1) membrane Current (2) membrane Voltage (3)X position (4) Y
%                   position (5)photodiode data
% expStruct -       The actual expStructure used to run the experiment
% expProt -         experimental protocols ordered by presentation order
%                   and with relevant initial positions filled in
%

daqreset
load(fullfile(direct, 'ExpStruct.mat'))

% create results dir if necessary
dirCont = dir(fullfile(direct,'results')); 

if length(dirCont) < 1 % if nothing is called results
    mkdir(direct, 'results')
else
    resDirInd = find([dirCont(:).isdir]);
    if ~resDirInd %not empty but not a dir
        mkdir(direc, 'results')
    end        
end

if nargin < 4
    freqXY = 20;
end

if nargin < 5
    random = 1;
end


% THIS SECTION SEEMS TO CAUSE COMM PROBLEMS
%check that patterns and posFunc in expStruct match the SD card
% Panel_com('sync_sd_info') %updates the SD.mat file based on SD card in controller
% pause(2)
% load 'C:\Users\gruntmane\Documents\MATLAB\XmegaController_Matlab_V13\controller\SD.mat'
% sdPatNames = SD.pattern.pattNames;
% expStPatNames = {expStruct.pattern(:).name};
% sdPosFuncNames = SD.function.posFunctionName;
% expStPosFuncNames = {expStruct.posFunc(:).name};
% 
% patNamesCheck = prod(cellfun(@(x,y) strcmp(x,y(1:(end-4))), expStPatNames, sdPatNames));
% posFuncNameCheck = prod(cellfun(@(x,y) strcmp(x,y(1:(end-4))), expStPosFuncNames, sdPosFuncNames));
% 
% if ~patNamesCheck || ~posFuncNameCheck
%     error('SD card content does not agree with ExpStruct')
% end


if random % makes sure that protocols are presented in a random order but within categories 
    allcat = [expStruct.protocol(protInds).Category];
    uniCat = unique(allcat);
    catCell = cell(1, length(uniCat));
    for ii=1:length(uniCat)
        catInd = find(allcat == uniCat(ii));
        tmpShuff = randperm(length(catInd));
        catCell{ii} = protInds(catInd(tmpShuff));
    end
    allShuff = randperm(length(uniCat));
    expOrder = [catCell{allShuff}];
else
    expOrder = protInds;
end

nProt = length(protInds);
offset = [1, 1];
% setting up the session

ses = daq.createSession('ni');
ses.addAnalogInputChannel('Dev1',0:4, 'Voltage');
ses.Channels(1).InputType = 'SingleEnded';
ses.Channels(2).InputType = 'SingleEnded';
ses.Channels(3).InputType = 'SingleEnded';
ses.Channels(4).InputType = 'SingleEnded';
ses.Channels(5).InputType = 'SingleEnded';
ses.Rate = 10000;
disp(['session rate is: ', num2str(ses.Rate)])

expResults = struct;
expProts = expStruct.protocol(expOrder);

% setting up the waitbar to cancel function
wbh = waitbar(0,'1','Name','Presenting Protocol',...
            'CreateCancelBtn',...
            'setappdata(gcbf,''canceling'',1)');
setappdata(wbh,'canceling',0)



for ii=1:nProt
    
    relInd = expOrder(ii);
    currProt = expStruct.protocol(relInd);
    
    if currProt.InitialPosition(1) == -1  % these values are define in the beginning of createProtocolScrip
        offset = [iniPos, 1];
    end
    
    tempDur = calculateDuration(expStruct, relInd, freqXY);
    expProts(ii).InitialPosition = offset;
    expResults(ii).protocolNum = relInd;
    expProts(ii).FuncFreqX = freqXY;
    expProts(ii).FuncFreqY = freqXY;
    expProts(ii).Duration = tempDur;
    expProts(ii).ProtNum = relInd;
    
    ses.DurationInSeconds = tempDur; 
    
    Panel_com('set_pattern_id', currProt.PatternID);   
    pause(0.03)
    Panel_com('set_position', offset);  
    pause(0.03)
    Panel_com('set_mode', [4, 4]);
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncX); 
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncY); 
    pause(0.03)
    Panel_com('set_funcx_freq' ,freqXY);
    pause(0.03)
    Panel_com('set_funcy_freq' , freqXY);
    pause(0.03)
    Panel_com('send_gain_bias', [0, 0, 0, 0]);
    pause(0.03)
     
    protTraits = expStruct.protocol(relInd).Traits;
    
    fprintf('Presenting protocol %d (%d of %d): %s\n', relInd, ii, nProt, protTraits) 
    
    waitbar(ii/nProt,wbh,sprintf('%d of %d: protocol %d',ii, nProt, relInd))
    
    Panel_com('start')
    data = ses.startForeground;
    expResults(ii).data = data;
    %in case experiment crashes
    save(fullfile(direct,'results',['tempShortResultsProtocol',num2str(relInd), '.mat']), 'data')
    Panel_com('stop')
    
    if getappdata(wbh,'canceling')
        break
    end
    
    
    
end

timeStamp = datestr(clock, 'yyyymmdd_HH-MM-SS');

save(fullfile(direct, 'results', ['shortExpInfo', timeStamp,]), ...
    'expResults', 'expStruct', 'expProts')

delete(fullfile(direct, 'results','tempShortResults*.mat'))
Panel_com('all_off')

delete(wbh)

end



%%%%%%%%%%%%%%%%%%

function durInSec = calculateDuration(expStruct, pInd, relFreq)

% This subfunction calculates the new duration for the protocol based on
% its general index (pInd) and the new freq (relFreq)

postStimDur = 0.5; % same as in createProtocolsScript  

posFunInd = expStruct.protocol(pInd).PosFuncX(2);
posFunLength = expStruct.posFunc(posFunInd).length;
tempRemove = 1000 - relFreq * postStimDur;
durInSec = (posFunLength - tempRemove)/relFreq; % in secs



end




    


