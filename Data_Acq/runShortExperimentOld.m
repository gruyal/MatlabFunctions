function expResults = runShortExperiment(direct, iniPosSt, protInds, random)

% function data = runPanelExperiment(direct)
% This function runs the protocols generated by 'createExpStruct' and
% 'createProtocolsScript' and collects the gennerated data. 
% The function runs a session for each seperate protocol and saves after each one 
%
% INPUT
% direct - relevant 'on_SDcard' directory in which expStruct is save and to which 
%          the generated data would be saved. expStruct is generated as
%          stated above, and should contain pattern, posFunc, and protocol
%          fields. It is also recommended to use 'checkExpStruct' to verify
%          that the protocols are referring to the right files. 
% iniPosSt - Structure generated using 'generateIniPositions' that defines 
%            initial position based on pattern type (VBars, HBars, SQ16, CrossSt, CrossVSt, SQ08, and CrossDiagonal).  
%            these are originally defined in createProtocolScript as [-1
%            1], [-2 1] [-3 1], [-4, 1], [-5 1], [-6 1] and [-7 1] respectively. 
% protInds - (optional) vector of relevant protocol indices. if not given
%           the function will use all protocols defined as 'short' in 'type' field.
% random - logical (optional). Flag for whether the protocols should be 
%          presented in a random order or not. Default is random
%
% OUTPUT 
% shortExpInfo  -   saves several variable that are related to the experiment
% expResults -      data aquired for each protocol is an N X 5 matrix with N being 
%                   the number of samples, and 5 channels which are: 
%                   (1) membrane Current (2) membrane Voltage (3)X position (4) Y
%                   position (5)photodiode data
% expStruct -       The actual expStructure used to run the experiment
% iniPosSt -        initial position structure used in the experiment
% expProt -         experimental protocols ordered by presentation order
%                   and with relevant initial positions filled in

daqreset
load(fullfile(direct, 'ExpStruct.mat'))

% create results dir if necessary
dirCont = dir(fullfile(direct,'results')); 

if length(dirCont) < 1 % if nothing is called results
    mkdir(direct, 'results')
else
    resDirInd = find([dirCont(:).isdir]);
    if ~resDirInd %not empty but not a dir
        mkdir(direc, 'results')
    end        
end

if nargin < 3
    protInds = getProtocolIndices(expStruct, {'type', 'eq', 3});
    protInds = protInds{3};
    if isempty(protInds)
        error('No short protocols defined in ExpStruct')
    end
end


if nargin < 4
    random = 1;
end



%check that patterns and posFunc in expStruct match the SD card
Panel_com('sync_sd_info') %updates the SD.mat file based on SD card in controller
pause(2)
load 'C:\Users\gruntmane\Documents\MATLAB\XmegaController_Matlab_V13\controller\SD.mat'
sdPatNames = SD.pattern.pattNames;
expStPatNames = {expStruct.pattern(:).name};
sdPosFuncNames = SD.function.posFunctionName;
expStPosFuncNames = {expStruct.posFunc(:).name};

patNamesCheck = prod(cellfun(@(x,y) strcmp(x,y(1:(end-4))), expStPatNames, sdPatNames));
posFuncNameCheck = prod(cellfun(@(x,y) strcmp(x,y(1:(end-4))), expStPosFuncNames, sdPosFuncNames));

if ~patNamesCheck || ~posFuncNameCheck
    error('SD card content does not agree with ExpStruct')
end


if random % makes sure that protocols are presented in a random order but within categories 
    allcat = [expStruct.protocol(protInds).Category];
    uniCat = unique(allcat);
    catCell = cell(1, length(uniCat));
    for ii=1:length(uniCat)
        catInd = find(allcat == uniCat(ii));
        tmpShuff = randperm(length(catInd));
        catCell{ii} = protInds(catInd(tmpShuff));
    end
    allShuff = randperm(length(uniCat));
    expOrder = [catCell{allShuff}];
else
    expOrder = protInds;
end

nProt = length(protInds);

% setting up the session

ses = daq.createSession('ni');
ses.addAnalogInputChannel('Dev1',0:4, 'Voltage');
ses.Channels(1).InputType = 'SingleEnded';
ses.Channels(2).InputType = 'SingleEnded';
ses.Channels(3).InputType = 'SingleEnded';
ses.Channels(4).InputType = 'SingleEnded';
ses.Channels(5).InputType = 'SingleEnded';
ses.Rate = 10000;
disp(['session rate is: ', num2str(ses.Rate)])

expResults = struct;
expProts = expStruct.protocol(expOrder);

% setting up the waitbar to cancel function
wbh = waitbar(0,'1','Name','Presenting Protocol',...
            'CreateCancelBtn',...
            'setappdata(gcbf,''canceling'',1)');
setappdata(wbh,'canceling',0)



for ii=1:nProt
    
    relInd = expOrder(ii);
    currProt = expStruct.protocol(relInd);
    
    
    switch currProt.InitialPosition(1) % these values are define in the beginning of createProtocolScript
        case -1
            offset = iniPosSt.VBars;
        case -2
            offset = iniPosSt.HBars;
        case -3
            offset = iniPosSt.SQ16;
        case -4 
            offset = iniPosSt.CrossSt;
        case -5
            offset = iniPosSt.CrossVSt;
        case -6
            offset = iniPosSt.SQ08;
        case -7
            offset = iniPosSt.CrossDiag;
        otherwise
            offset = currProt.InitialPosition;
    end
    
    expProts(ii).InitialPosition = offset;
    expResults(ii).protocolNum = relInd;
    
    ses.DurationInSeconds = currProt.Duration; 
    
    Panel_com('set_pattern_id', currProt.PatternID);   
    pause(0.03)
    Panel_com('set_position', offset);  
    pause(0.03)
    Panel_com('set_mode', currProt.Mode);
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncX); 
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncY); 
    pause(0.03)
    Panel_com('set_funcx_freq' , currProt.FuncFreqX);
    pause(0.03)
    Panel_com('set_funcy_freq' , currProt.FuncFreqY);
    pause(0.03)
    Panel_com('send_gain_bias', currProt.Gain);
    pause(0.03)
     
    protTraits = expStruct.protocol(relInd).Traits;
    
    fprintf('Presenting protocol %d (%d of %d): %s\n', relInd, ii, nProt, protTraits) 
    
    waitbar(ii/nProt,wbh,sprintf('%d of %d: protocol %d',ii, nProt, relInd))
    
    Panel_com('start')
    data = ses.startForeground;
    expResults(ii).data = data;
    %in case experiment crashes
    save(fullfile(direct,'results',['tempShortResultsProtocol',num2str(relInd), '.mat']), 'data')
    Panel_com('stop')
    
    if getappdata(wbh,'canceling')
        break
    end
    
    
    
end

timeStamp = datestr(clock, 'yyyymmdd_HH-MM-SS');

save(fullfile(direct, 'results', ['shortExpInfo', timeStamp,]), ...
    'expResults', 'expStruct', 'iniPosSt', 'expProts')

delete(fullfile(direct, 'results','tempShortResults*.mat'))
Panel_com('all_off')

delete(wbh)

end
    


