function expResults = runHalfFieldExperiment(direct, group, genFreq)

% function data = runPanelExperiment(direct)
% This function runs the protocols generated by 'createExpStruct' and
% 'createProtocolsScript' and collects the gennerated data. 
% The function runs a session for each seperate protocol and saves after each one 
%
% INPUT
% direct -  relevant 'on_SDcard' directory in which expStruct is save and to which 
%           the generated data would be saved. expStruct is generated as
%           stated above, and should contain pattern, posFunc, and protocol
%           fields. It is also recommended to use 'checkExpStruct' to verify
%           that the protocols are referring to the right files. 
% group -   scalar. chooses which type of protocols to present from the
%           half field ones.
%           (1) Flash (2) Grating (3) Baredge (4) V Bar (max contrast)
%           (5) V and H Bars
% genFreq - (optional) scalar. Single number determining presentation speed 
%           in frames per second. default 20 
% 
%
% OUTPUT 
% expResults  -  
%          data aquired for each protocol is an N X 6 matrix with N being 
%          the number of samples, and 5 channels which are: 
%          (1) membrane Current (2) membrane Voltage (3)X position (4) Y
%          position (5) protocol identifier (6)photodiode data


if nargin < 3
    genFreq = 20;
end


daqreset
load(fullfile(direct, 'ExpStruct.mat'))

% create results dir if necessary
dirCont = dir(fullfile(direct,'results')); 

if length(dirCont) < 1 % if nothing is called results
    mkdir(direct, 'results')
else
    resDirInd = find([dirCont(:).isdir]);
    if ~resDirInd %not empty but not a dir
        mkdir(direc, 'results')
    end        
end


pOptions = {'object', 'eq', 4; 'object', 'eq', 5; 'object', 'eq', 2; 'bkg', 'eq', 1; 'bkg', 'eq', 0};

protInds = getProtocolIndices(expStruct, {'type', 'eq', 2; pOptions{group, :}}, {'and'});
protInds = protInds{1};

if group ==1 % no reason to flash both protocols
    protInds = protInds(1); 
end


if ~protInds
    error('No half field protocols defined in ExpStruct')
end



random=1;
if random 
    reshuf = randperm(length(protInds));
    expOrder = protInds(reshuf);
% else
%     expOrder = protInds;
end

nProt = length(protInds);
expProts = expStruct.protocol(expOrder);
% setting up the session

ses = daq.createSession('ni');
ses.addAnalogInputChannel('Dev1',0:4, 'Voltage');

ses.Channels(1).InputType = 'SingleEnded';
ses.Channels(2).InputType = 'SingleEnded';
ses.Channels(3).InputType = 'SingleEnded';
ses.Channels(4).InputType = 'SingleEnded';
ses.Channels(5).InputType = 'SingleEnded';

ses.Rate = 10000;

disp(['session rate is: ', num2str(ses.Rate)])

expResults = struct;

for ii=1:nProt
    
    relInd = expOrder(ii);
    currProt = expStruct.protocol(relInd);
    
    
    expResults(ii).protocolNum = relInd;
    tempDur = calculateDuration(expStruct, relInd, genFreq);
    
    expProts(ii).FuncFreqX = genFreq;
    expProts(ii).FuncFreqY = genFreq;
    expResults(ii).protocolNum = relInd;
    expProts(ii).Duration = tempDur;
    expProts(ii).ProtNum = relInd;
    
    ses.DurationInSeconds = tempDur; 
    
    Panel_com('set_pattern_id', currProt.PatternID);   
    pause(0.03)
    Panel_com('set_position', currProt.InitialPosition);  
    pause(0.03)
    Panel_com('set_mode', [4, 4]);
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncX); 
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncY); 
    pause(0.03)
    Panel_com('set_funcx_freq' , genFreq);
    pause(0.03)
    Panel_com('set_funcy_freq' , genFreq);
    pause(0.03)
    Panel_com('send_gain_bias', [0, 0, 0, 0]);
    pause(0.03)
    
    relPat = expStruct.protocol(relInd).PatternID;
    patName = expStruct.pattern(relPat).name;
    fprintf('Presenting protocol %d (%d of %d): %s\n', relInd, ii, nProt, patName) 
    
    
    Panel_com('start')
    data = ses.startForeground;
    expResults(ii).data = data;
    %in case experiment crashes
    save(fullfile(direct,'results','tempHFResults.mat'), 'expResults')
    Panel_com('stop')
    
end

timeStamp = datestr(clock, 'yyyymmdd_HH-MM-SS');


save(fullfile(direct, 'results', ['HFExpInfo', timeStamp,]), 'expResults', 'expStruct', 'expProts')

delete(fullfile(direct, 'results','tempHFResults.mat'))
Panel_com('all_off')


% Plotting results


for ii=1:length(expOrder)
    
    plotResultsByMatrixPos(expOrder(ii), expResults, expStruct, genFreq); 
    set(gcf, 'name', expStruct.protocol(expOrder(ii)).Traits)
    
end

    




end
    


%%%%%%%%%%%%%%%%%%

function durInSec = calculateDuration(expStruct, pInd, relFreq)

% This subfunction calculates the new duration for the protocol based on
% its general index (pInd) and the new freq (relFreq)

postStimDur = 0.5; % same as in createProtocolsScript  

posFunInd = expStruct.protocol(pInd).PosFuncX(2);
posFunLength = expStruct.posFunc(posFunInd).length;
tempRemove = 1000 - relFreq * postStimDur;
durInSec = (posFunLength - tempRemove)/relFreq; % in secs



end





