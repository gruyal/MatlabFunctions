function expResults = runCoreExperiment(direct, objectChoice)

% function data = runPanelExperiment(direct)
% This function runs the protocols generated by 'createExpStruct' and
% 'createProtocolsScript' and collects the gennerated data. 
% The function runs a session for each seperate protocol and saves after each one 
%
% INPUT
% direct - relevant 'on_SDcard' directory in which expStruct is save and to which 
%          the generated data would be saved. expStruct is generated as
%          stated above, and should contain pattern, posFunc, and protocol
%          fields. It is also recommended to use 'checkExpStruct' to verify
%          that the protocols are referring to the right files. 
% objectChoice -    chooses which objects to display. 
%                   1 : bars 
%                   2 : baredges
% 
%
% OUTPUT 
% expResults  -  fill in later
%          data aquired for each protocol is an N X 6 matrix with N being 
%          the number of samples, and 5 channels which are: 
%          (1) membrane Current (2) membrane Voltage (3)X position (4) Y
%          position (5) protocol identifier (6)photodiode data

daqreset
load(fullfile(direct, 'ExpStruct.mat'))

% create results dir if necessary
dirCont = dir(fullfile(direct,'results')); 

if length(dirCont) < 1 % if nothing is called results
    mkdir(direct, 'results')
else
    resDirInd = find([dirCont(:).isdir]);
    if ~resDirInd %not empty but not a dir
        mkdir(direc, 'results')
    end        
end




protInds = getProtocolIndices(expStruct, ...
           {'type', 'eq', 1; 'object', 'eq', objectChoice}, {'and'});
protInds = protInds{1};

if ~protInds
    error('No base protocols defined in ExpStruct')
end


%check that patterns and posFunc in expStruct match the SD card
Panel_com('sync_sd_info') %updates the SD.mat file based on SD card in controller
pause(2)
load 'C:\Users\gruntmane\Documents\MATLAB\XmegaController_Matlab_V13\controller\SD.mat'
sdPatNames = SD.pattern.pattNames;
expStPatNames = {expStruct.pattern(:).name};
sdPosFuncNames = SD.function.posFunctionName;
expStPosFuncNames = {expStruct.posFunc(:).name};

patNamesCheck = prod(cellfun(@(x,y) strcmp(x,y(1:(end-4))), expStPatNames, sdPatNames));
posFuncNameCheck = prod(cellfun(@(x,y) strcmp(x,y(1:(end-4))), expStPosFuncNames, sdPosFuncNames));

if ~patNamesCheck || ~posFuncNameCheck
    error('SD card content does not agree with ExpStruct')
end

random=1;
if random 
    reshuf = randperm(length(protInds));
    expOrder = protInds(reshuf);
% else
%     expOrder = protInds;
end

nProt = length(protInds);

% setting up the session

ses = daq.createSession('ni');
ses.addAnalogInputChannel('Dev1',0:4, 'Voltage');

ses.Channels(1).InputType = 'SingleEnded';
ses.Channels(2).InputType = 'SingleEnded';
ses.Channels(3).InputType = 'SingleEnded';
ses.Channels(4).InputType = 'SingleEnded';
ses.Channels(5).InputType = 'SingleEnded';

ses.Rate = 10000;

disp(['session rate is: ', num2str(ses.Rate)])

expResults = struct;

for ii=1:nProt
    
    relInd = expOrder(ii);
    currProt = expStruct.protocol(relInd);
    
    
    expResults(ii).protocolNum = relInd;
    
    ses.DurationInSeconds = currProt.Duration; 
    
    Panel_com('set_pattern_id', currProt.PatternID);   
    pause(0.03)
    Panel_com('set_position', currProt.InitialPosition);  
    pause(0.03)
    Panel_com('set_mode', currProt.Mode);
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncX); 
    pause(0.03)
    Panel_com('set_posfunc_id', currProt.PosFuncY); 
    pause(0.03)
    Panel_com('set_funcx_freq' , currProt.FuncFreqX);
    pause(0.03)
    Panel_com('set_funcy_freq' , currProt.FuncFreqY);
    pause(0.03)
    Panel_com('send_gain_bias', currProt.Gain);
    pause(0.03)
%     Panel_com('set_ao', [3, currProt.OutputVol*(32767/10)])
%     pause(0.03)
%     
    relPat = expStruct.protocol(relInd).PatternID;
    patName = expStruct.pattern(relPat).name;
    fprintf('Presenting protocol %d (%d of %d): %s\n', relInd, ii, nProt, patName) 

    Panel_com('start')
    data = ses.startForeground;
    expResults(ii).data = data;
    %in case experiment crashes
    save(fullfile(direct,'results','tempCoreResults.mat'), 'expResults')
    Panel_com('stop')
    
end

timeStamp = datestr(clock, 'yyyymmdd_HH-MM-SS');


save(fullfile(direct, 'results', ['coreExpInfo', timeStamp,]), 'expResults', 'expStruct')

delete(fullfile(direct, 'results','tempCoreResults.mat'))
Panel_com('all_off')


% Plotting results

[allMv, allMvNames] = extractTrait(expStruct, protInds, 'movement');
[ ~ , allBrNames] = extractTrait(expStruct, protInds, 'brightness');
relMv = unique(allMv);

for ii=1:length(relMv)
    reldirect = relMv(ii);
    relProts = find(allMv == reldirect);
    posCell = generatePositionCell(0.05, 0.95, 0.05, 0.95, -1, 0.1, length(relProts));
    axh = zeros(1, length(relProts));
    figure
    set(gcf, 'name', ['Movement: ', allMvNames{relProts(1)}])
    for jj=1:length(relProts)
       axh(jj) = plotResultsByArenaPos(protInds(relProts(jj)), expResults, expStruct); 
       set(axh(jj), 'position', posCell{jj})
       tmptit = allBrNames{relProts(jj)};
       title(tmptit)
    end
        
    limyy = get(axh(:), 'ylim');  
    if iscell(limyy)
        limyy = [limyy{:}];
    end
    set(axh(:), 'ylim', [min(limyy) max(limyy)]);

end
    


end
    


