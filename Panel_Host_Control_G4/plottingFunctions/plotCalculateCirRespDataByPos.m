
function varargout = plotCalculateCirRespDataByPos(cirRespResultSt)

% function varargout = plotCalculateCirRespData(cirRespResultSt)
%
% preliminary function to plot cirular response data that was generated by 
% calculateCircularRepresentationForProtocol

figure('units', 'normalized', 'position', [0.4, 0.12, 0.22, 0.8])

nameList = {'dc'; 'vecMag'; 'normVecMag'; 'theta'; 'relPos'; 'eqPosInd'};
namesInd = zeros(1, length(nameList));

fNames = fieldnames(cirRespResultSt);
%checking input
for ii=1:length(nameList)
    tempI = find(ismember(fNames, nameList{ii}));
    if isempty(tempI)
        error('cirRespResultSt is missing %s field', nameList{ii})
    end
    namesInd(ii) = tempI;
end

posCell = generatePositionCell(0.05, 0.95, 0.05, 0.975, -1, 0.04, 4);

numGrt=length(cirRespResultSt);

relCol = cbrewer('qual', 'Paired', 2*numGrt); %to make it similar to DSSummary
xxMin=0; xxMax=0;

for ff=1:4 % since last is time
    
    axh(ff) = axes('position', posCell{ff});
    hold on
    
    for ii=1:numGrt        
        relFName = nameList{ff};
        relDat = getfield(cirRespResultSt(ii), relFName);
        plot(cirRespResultSt(ii).relPos, relDat, '-o', ...
            'markerfacecolor', relCol(2*ii-1, :), 'markeredgecolor', relCol(2*ii-1, :), 'markersize', 3, ...
            'color', relCol(2*ii-1, :), 'linewidth', 2)
        eqInds = logical(cirRespResultSt(ii).eqPosInd);
        eqDat = relDat(eqInds);
        eqPos = cirRespResultSt(ii).relPos(eqInds);
        plot(eqPos, eqDat, 'o', 'markerfacecolor', relCol(2*ii, :), 'markersize', 8, 'markeredgecolor', relCol(2*ii, :))
        title(relFName)
        if xxMin > cirRespResultSt(ii).relPos(1)
            xxMin = cirRespResultSt(ii).relPos(1);
        end
        if xxMax < cirRespResultSt(ii).relPos(end)
            xxMax = cirRespResultSt(ii).relPos(end);
        end
    end
    
    hold off
    if strcmpi(relFName, 'normVecMag')
        set(gca, 'ylim', [0,1])
    end
    
    if strcmpi(relFName, 'theta')
        set(axh(ff), 'ylim', [-pi-0.1, pi+0.1], 'ytick', -pi:pi/4:pi, ...
            'yticklabel', {'-\Pi', '', '-\Pi/2', '', '0', '', '\Pi/2', '', '\Pi'}, ...
            'ygrid', 'on')
    end
    
    
end

set(axh(:), 'xlim', [xxMin, xxMax])

if nargout > 0
    varargout{1} = axh;
end


end