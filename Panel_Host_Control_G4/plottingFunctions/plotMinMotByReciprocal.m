function varargout = plotMinMotByReciprocal(minMotSt, diagInd)

% function plotMinMotReduced(minMotSt, diagInd)
%
% the function plots the minMot data with more direct comparisons of means.
% Data can be plotted either as per column, or per row. 
% function uses stimDur to shift data so it aligns with the apperance of
% the second bar
%
% INPUT
%
% minMotSt -        structure generated by calcMinMotMeans with .mean field
%                   in it, and data organized by bar position and timing
% diagInd -         integer specifying the desired position. row and colomn of that position will be compared  
%  
%
% Plot is comparing the reciprocal position for all the timings in the same
% axes (datSiz(1) axes total)
% so that the second bar appearance is aligned. 
%
% examples:
% 1) 0  will plot all the stim that had the first bar at zero compared to
% all the stim with the second bar at zero
% 
%
% Note!! function assumes only one uniStim (BB usually)
%
%
% OUTPUT
% if asked axh is given as output


timeTit = {'Simultaneous'; 'First bar disappears'; 'First bar remains'};

assert(isvector(diagInd), 'diagInd should be a 1X2 vector')
assert(length(diagInd) == 1, 'diagInd should be a 1X2 vector')

assert(isfield(minMotSt(1), 'data'), 'minMotSt is missing data field')
assert(isfield(minMotSt(1).data, 'mean'), 'minMotSt is missing mean field')

stimDur = minMotSt.stimDur;
datSiz = size(minMotSt(1).data);
relTimeTit = timeTit(end-datSiz(3)+1:end);

convInpV = diagInd + ceil(datSiz(1)/2); % since center is zero position and it is always an odd number of positions

barInd = convInpV(1);
assert(sum(ismember(barInd, 1:datSiz(1))) ==1, 'diagInd index out of range')

relData{1} = squeeze(minMotSt(1).data(barInd, :, :));
relData{2} = squeeze(minMotSt(1).data(:, barInd, :));

%plotting the data

midPosCol = [1,1,1]*0.65;

fh = figure('units', 'normalized', 'position', [0.2, 0.1, 0.25, 0.8], 'name', num2str(diagInd));

axh = nan(datSiz(3), datSiz(1));
posCell = generatePositionCell(0.1, 0.99, 0.02, 0.975, 0.03, 0.005, [datSiz(3), datSiz(1)]);
numForLeg = (1:datSiz(1)) - barInd;

relCol = cbrewer('qual', 'Paired', 2*datSiz(3)); 
    
for ii=1:datSiz(1)
    
    tempFac = abs(ii-barInd) * stimDur;
    barDiff = barInd - ii;
    
    
    for tt=1:datSiz(3)
        axh(tt, ii)  = axes('position', posCell{tt, ii});
        title(['posDiff:', num2str(numForLeg(ii))])
        
        hold on
        if barDiff == 0
            if ~isempty(relData{1}(ii, tt).mean)
                plot(relData{1}(ii, tt).mean(:,1) - tempFac, relData{1}(ii, tt).mean(:,2), 'color', midPosCol, 'linewidth', 2)
                relPos = ii;
                relT = tt;
            else % will fail if the empty is first
                plot(relData{1}(relPos, relT).mean(:,1) - tempFac, relData{1}(relPos, relT).mean(:,2), 'color', 'k', 'linewidth', 2)
            end
        else
            for jj=1:2
                plot(relData{jj}(ii, tt).mean(:,1) - tempFac, relData{jj}(ii, tt).mean(:,2), ...
                     'color', relCol(2*tt-jj+1, :), 'linewidth', 2)
            end
            lht = legend(['F:', num2str(diagInd), ' S:', num2str(diagInd-barDiff)], ...
                         ['F:', num2str(diagInd-barDiff), ' S:', num2str(diagInd)], ...
                         'location', 'northeast');
            set(lht, 'box', 'off')
        end
            
%         if ii == 1 % will fail if plotting the starting postion 
%             set(tempH, 'Tag', 'legFlag');
%         end
       hold off     
    end
        
    
end

hForLeg = findobj(axh(:,1), 'Tag', 'legFlag');


if floor(datSiz(1)/2) == datSiz(1)/2
    numForLeg(numForLeg <= 0) = numForLeg(numForLeg <= 0)-1; % since if it is even the sim case is not presented
end

legStr = relTimeTit;
for tt=1:datSiz(3)    
    title(axh(tt, 1), legStr{tt});
end

             
yyLim = get(axh(:), 'YLim');
yyLim = vertcat(yyLim{:});
yyMax = max(yyLim(:,2));
yyMin = min(yyLim(:,1));

xxLim = [-200, 300];

xxTick = xxLim(1):100:xxLim(2); %get(axh(1), 'XTick');

set(axh(:), 'YLim', [yyMin, yyMax], 'XLim', xxLim, 'XTickLabel', {}, 'XTick', xxTick)

set(axh(end-2:end), 'XtickLabel', arrayfun(@num2str, xxTick, 'uniformoutput', 0))

for ii=1:datSiz(1)
    tempLab = get(axh(1,ii), 'Ylabel');
    set(tempLab, 'String', ['posDiff:', num2str(numForLeg(ii))])
end

if nargout > 0 
    varargout{1} = axh;
end


end
