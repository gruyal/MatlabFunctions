function sigBarFitSt = fitFuncToSingleBarSt(sigBarProtSt)

% function sigBarFitSt = fitFuncToSingleBarSt(sigBarProtSt)
%
% this function fit uses generateAlignedSingleBarStwMinMax to generate the single
% bar response at each position and each time. It then fits alinear function to the rising phase
% and an exponent to the decay. 
%
% Note! simplified version of fitEXpToSingleBarSt
% 
%
% INPUT
%
% sigBarProtSt -        protocolStruct from a singleBar protocol
%
% OUTPUT
%
% in addition to the fields generated by generateAlignedSingleBarStwMinMax
% this function adds the following (for each position,duration) :
%
% .fitType -        0 no fit 
%                   2 exp fit (decay/hypP only) 
%                   3 lin+exp fit (rise and decay/hypP)
% Note! no linear fit w/o exp (since it must fall after rise) but the
% opposite is possible
%
% .fitResp -        at most 2 structures long (1) is rise fit (linear) and
%                   2 is exp fit (decay). Each contains the follong fields:
%   .fit -          fit structure (result from fit function 
%   .gof -          goodness of fit structure (also result from fit)
%   .relInds -      indcies for data that was used in fit (baseSub(:, n) is the refernce) 
    

%these parameters are used for maximizing the linear fit (since in strong
%responses it saturates)
linFitWin =  200;
numFitAttempts = 5;

sigBSt = generateAlignedSingleBarStwMinMax(sigBarProtSt);

fOpt = fitoptions('method', 'nonlinearleastsquare', ...
                  'lower', [-1000, -1000, 0], ...
                  'upper', [1000, 1000, 1000], ...
                  'startpoint', [1, 10, 20]);

decayMod = fittype('a+b*(exp(-x/c))', 'coefficients', {'a', 'b', 'c'}, 'options', fOpt);

datSiz = size(sigBSt);

for ii=1:datSiz(1)
    
    for jj=1:datSiz(2)
        
        tempTime = sigBSt(ii,jj).subData.baseSub(:,1);
        tempResp = sigBSt(ii,jj).subData.baseSub(:,2);
        
        fitType = 0;
        
        if ~isnan(sigBSt(ii,jj).resp.minTime)
            
            expFitInds = tempTime > sigBSt(ii,jj).resp.maxTime & tempTime < sigBSt(ii,jj).resp.minTime; 
            expFitTime = tempTime(expFitInds);
            expFitTimeZ = expFitTime - expFitTime(1); % fit won't work properly without this
            expFitResp = tempResp(expFitInds);
                
            [expFit, expGoF] = fit(expFitTimeZ, expFitResp, decayMod);
            
            sigBSt(ii,jj).fitResp(2).fit = expFit;
            sigBSt(ii,jj).fitResp(2).gof = expGoF;
            sigBSt(ii,jj).fitResp(2).relInds = expFitInds;
            
            fitType = fitType+2;
        end
        
        if sigBSt(ii,jj).resp.maxVal
            
            linFitInds = tempTime > sigBSt(ii,jj).resp.preRespTime & tempTime < sigBSt(ii,jj).resp.maxTime; 
            linFitTime = tempTime(linFitInds);
            linFitTimeZ = linFitTime - linFitTime(1); % fit won't work properly without this
            
            allLinFit = cell(1,numFitAttempts);
            allLinGof = cell(1,numFitAttempts);
            
            for kk=1:numFitAttempts
                newFitInds = circshift(linFitInds, -linFitWin*(kk-1)); % move the fitted window earlier to avoid the saturating peak
                linFitResp = tempResp(newFitInds);
                [allLinFit{kk}, allLinGof{kk}] = fit(linFitTimeZ, linFitResp, 'poly1');
            end
            
            totRSq = cellfun(@(x) x.rsquare, allLinGof);
            totSlope = cellfun(@(x) x.p1, allLinFit);
            
            [~, maxInd] = max(totRSq .* totSlope); % to account for some cases (like 20160427 5,2) where it fit a downward slope abit better

            sigBSt(ii,jj).fitResp(1).fit = allLinFit{maxInd};
            sigBSt(ii,jj).fitResp(1).gof = allLinGof{maxInd};
            sigBSt(ii,jj).fitResp(1).relInds = circshift(linFitInds, -linFitWin*(maxInd-1));
            
            fitType = fitType+1;
        end
        
        sigBSt(ii,jj).fitType = fitType;
        
    end
    
    fprintf('finished fitting position %d \n', ii);
end


sigBarFitSt = sigBSt;



end