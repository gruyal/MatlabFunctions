    function plotRevPhiResultsIndivStim(flightData, parSt)

% function plotRevPhiResultsIndivStim(flightData)
%
% This function plots the results from analyzeRevPhiDataIndivStim
% input is flidhtData, Data structure generated by G4_Process_Data_flyingdetectorthe output 
%
% PatSt -       same parameter structure as described in analyzeRevPhiDataIndivStim


%for plotting the windows from which data was taken
yMaxV = 3.5; yMinV = -2; 
patchBaseY = [yMinV; yMinV; yMaxV; yMaxV];

resultsStruct = analyzeRevPhiDataIndivStim(flightData, parSt);

frameChInd = find(cellfun(@(x) contains(x, 'Frame'), flightData.channelNames.timeseries));
LmRChInd = find(cellfun(@(x) contains(x, 'LmR'), flightData.channelNames.timeseries)); % should give 2 results
LpRChInd = find(cellfun(@(x) contains(x, 'LpR'), flightData.channelNames.timeseries)); 
LmRChInd = LmRChInd(2); 

dSiz = size(resultsStruct.LmR);

numStim = dSiz(1); 
numReps = dSiz(2); 

xSt = 0.05; 
xEnd = 0.95; 

posCell = generatePositionCell(xSt, xEnd, 0.05, 0.95, -1, 0.1, 3);
posCell2 = generatePositionCell(xSt, xEnd, posCell{3}(2), sum(posCell{3}([2,4])), 0.1, -1, numReps);

axh = gobjects(numStim, numReps+2);
datCol = cbrewer('qual', 'Set1', numReps); 
seqCol = cbrewer('seq', 'YlOrRd', max(parSt.numPres)+1); 

for ii=1:numStim
    
   figure('position', [100 + 50*ii, 100+50*ii, 1500, 600])
   axh(ii, 1) = axes('position', posCell{1});
   hold on 
   axh(ii, 2) = axes('position', posCell{2});
   hold on 
   
   drewPatch = false;
   
   for jj=1:numReps
       
       relInds = resultsStruct.FullVecInds(ii,jj,1):resultsStruct.FullVecInds(ii,jj,2);
       
       if isnan(relInds)
           continue
       end
       
       relTime = flightData.timestamps(relInds);
       
       tempDat = flightData.timeseries([frameChInd,LmRChInd,LpRChInd], ii, jj, relInds); 
       set(gcf, 'currentaxes', axh(ii, 1))
       
       if ismember(ii, parSt.OMStimNum)
           frDat = squeeze(tempDat(1,:)) ./10; % since in optomotor stim the number is higher
       else
           frDat = squeeze(tempDat(1,:));
       end
%        frDat(frDat > 3) = nan;
       [indV, indB] = SplitVec(resultsStruct.Inds{ii,jj}, 'equal', 'firstVal', 'bracket');
       relIndB = indB(indV, :); 
     
       timeRelIndB = relTime(relIndB);
       patchCrd = [timeRelIndB, fliplr(timeRelIndB)]'; 
       yPatchCrd = repmat(patchBaseY, 1, size(patchCrd,2));
       if ~drewPatch
        patch(patchCrd, yPatchCrd, [1,1,1]*0.95, 'linestyle', 'none')
        drewPatch = true; 
       end
       plot(relTime, frDat, 'color', datCol(jj, :))
       plot(relTime, squeeze(tempDat(2,:)), 'color', datCol(jj, :))
%        plot(flightData.timestamps(relInds), resultsStruct.Inds{ii,jj} -5, 'color', datCol(jj, :), 'linewidth', 2)
       
       set(gcf, 'currentaxes', axh(ii, 2))
       plot(relTime, squeeze(tempDat(3,:)), 'color', datCol(jj, :))
       
       axh(ii, jj+2) = axes('position', posCell2{jj});
       hold on 
       tempD = resultsStruct.LmR{ii,jj};
       for kk=1:size(tempD,2)
           plot(tempD(:, kk), 'color', seqCol(kk+1, :), 'linewidth', 2)
       end
       
       hold off
       
   end
   
end

figure('position', [100 + 50*ii, 100+50*ii, 500, 1500])

posCell = generatePositionCell(xSt, xEnd, 0.05, 0.95, -1, 0.1, 3);
axh2 = gobjects(size(posCell)); 

numHist = size(flightData.interhistogram,1); 
histInds = {1:ceil(numHist/2); ceil(numHist/2)+1:numHist; 1:numHist};

for hh=1:length(axh2)
    
    axh2(hh) = axes('position', posCell{hh});
    plot(sum(flightData.interhistogram(histInds{hh}, :)))

end

end
       
       
   
   
   