function varargout = plotResultsByArenaPos(relProt, expRes, expSt, relMatrixDim)

% function varargout = plotResultsByArenaPos(relIndex, expRes, expSt, relMatrixDim)
% This function plots the results based on the relMatrixDim values
%
% INPUT
% relIProt -    Protocal number from expSt
% expRes -      expResults structure generated by runPanelExperiment (has
%               protocolNum and dara fields)
% expSt -       expStructure generated by checkExpStruct (has pattern, posFun,
%               and protocol fields)
% relMatrixDim- string ('x' or 'y') Dimension of the pattern matrix to use for plotting (by
%               default the biggest dimension would be used; if they are equal in size x would be used)
% 
%
% OUTPUT
% axhand -      (optional) axes handles to all the plots


samplingFreq = 10000; % assumes this for the calculation of findPositionFromVoltage

relIndex = find([expRes(:).protocolNum] == relProt);

datToPlot = expRes(relIndex).data(:,2);
protInd = expRes(relIndex).protocolNum;

tempProt = expSt.protocol(protInd);
patInd = tempProt.PatternID;
xxfreq = tempProt.FuncFreqX;
yyfreq = tempProt.FuncFreqY;


tempPat = expSt.pattern(patInd);
xxfr = tempPat.x_frames;
yyfr = tempPat.y_frames;


if nargin < 4
    
    if xxfr >= yyfr
        relMatrixDim = 'x';
    else 
        relMatrixDim = 'y';
    end
end


% finding the indices by which to divide the current recording

if strcmpi(relMatrixDim, 'x')
    relPosVec = expRes(relIndex).data(:, 3);
    relFreq = [samplingFreq, xxfreq];
    relFrames = xxfr;
elseif strcmpi(relMatrixDim, 'y')
    relPosVec = expRes(relIndex).data(:, 4);
    relFreq = [samplingFreq, yyfreq];
    relFrames = yyfr;
else
    error('relMatrixDim should be either x or y')
end

convPosVec = findPositionFromVoltage(relPosVec, relFreq, relFrames);
[spPosInds, spPosVal]= SplitVec(convPosVec, 'equal', 'bracket', 'firstval');

spPosInds = spPosInds(2:(end-1), :);
spPosVal = spPosVal(2:(end-1), :);


% chunk data into bits based on seqeunces spanning the whole range of
% movement

posIds = unique(spPosVal);
% minInds = find(spPosVal == min(posIds));
% minIntervals = spPosInds(minInds, :);
% maxInds = find(spPosVal == max(posIds));
% maxIntervals = spPosInds(maxInds, :);

if sign(median(diff(spPosVal))) == -1 % value in matrix is decreasing
    tempInts =  SplitVec(spPosVal, 'reverse', 'bracket');
    relIntervals = [spPosInds(tempInts(:,1),1), spPosInds(tempInts(:,2),2)];
else % value is increasing
    tempInts =  SplitVec(spPosVal, 'consecutive', 'bracket');
    relIntervals = [spPosInds(tempInts(:,1),1), spPosInds(tempInts(:,2),2)];
end


minInt = min(relIntervals(:,2) - relIntervals(:,1));
finDatToPlot = zeros(size(relIntervals,1), minInt+200); % adds 100 sample before and after

for ii=1:size(relIntervals, 1)
    
    postAdd = 100 - diff(relIntervals(ii, :)) + minInt;
    finDatToPlot(ii, :) = datToPlot((relIntervals(ii, 1)-99):(relIntervals(ii, 2)+postAdd));
    
end

% calculating all interval lengths for display purposes 
allIntLengths = arrayfun(@(x) spPosInds(spPosVal == x, :), posIds(2:end), 'uniformoutput', 0); %excludes zero
meanIntLengths = cellfun(@(x) mean(diff(x, 1, 2)), allIntLengths);
intLengthsToPlot = vertcat(1,cumsum(meanIntLengths) +100);


% trying a general solution for the way data is arranged 
allValsOrd = zeros(1, length(posIds));
for ii=1:length(posIds)
    valInd = find(spPosVal == posIds(ii));
    allValsOrd(valInd) = posIds(ii);
end


% plotting the data


%figure
axhand = axes('position', [0.05, 0.05, 0.9, 0.9]);    
plot(finDatToPlot'*10, 'color', [1 1 1]*0.8)
hold on 
plot(mean(finDatToPlot)*10, 'color', 'r', 'linewidth', 2)
    
set(axhand, 'xlim', [0, size(finDatToPlot, 2)])    
yylim = get(axhand, 'ylim');

yyval = (yylim(2)-yylim(1))/10 + yylim(1);

for ii=1:(length(intLengthsToPlot)-1)
    line([intLengthsToPlot(ii), intLengthsToPlot(ii+1)], [yyval, yyval], ...
        'color', [1 1 1]*~rem(ii,2), 'linewidth', 2)
    
    if ~rem(allValsOrd(ii),5)
        text(median(intLengthsToPlot(ii:(ii+1))), yyval, num2str(allValsOrd(ii)), ...
            'HorizontalAlignment', 'center', 'VerticalAlignment', 'bottom')
    end
end


hold off
    
if nargout
    varargout{1} = axhand;
end



end


