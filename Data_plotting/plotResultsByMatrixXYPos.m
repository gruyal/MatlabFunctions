function varargout = plotResultsByMatrixXYPos(relProt, expRes, expSt, numInterVals)

% function varargout = plotResultsByMatrixXYPos(relIndex, expRes, expSt, subplotSpecs)
% This function plots the results based on the both X and Y values (plots
% all diff x values with a shared y on the same figure)
%
% INPUT
% relProt -     Protocal number from expSt
% expRes -      expResults structure generated by runPanelExperiment (has
%               protocolNum and dara fields)
% expSt -       expStructure generated by checkExpStruct (has pattern, posFun,
%               and protocol fields)
% numInterVals- number of empty frames between each presentation (based on the position function). 
%               
% OUTPUT
% axhand -      (optional) axes handles to all the plots


samplingFreq = 10000; % assumes this for the calculation of findPositionFromVoltage

relIndex = find([expRes(:).protocolNum] == relProt);

datToPlot = expRes(relIndex).data(:,2);
protInd = expRes(relIndex).protocolNum;

tempProt = expSt.protocol(protInd);
patInd = tempProt.PatternID;
xxfreq = tempProt.FuncFreqX;
yyfreq = tempProt.FuncFreqY;

% samples interveining between stim presentation
addSamp = floor(samplingFreq/xxfreq * numInterVals);


tempPat = expSt.pattern(patInd);
xxfr = tempPat.x_frames;
yyfr = tempPat.y_frames;


convPosVecX = findPositionFromVoltage(expRes(relIndex).data(:, 3), [samplingFreq, xxfreq], xxfr);
[spPosIndsX, spPosValX]= SplitVec(convPosVecX, 'equal', 'bracket', 'firstval');

spPosIndsX = spPosIndsX(2:(end-1), :);
spPosValX = spPosValX(2:(end-1), :);


convPosVecY = findPositionFromVoltage(expRes(relIndex).data(:, 4), [samplingFreq,yyfreq], yyfr);
[spPosIndsY, spPosValY]= SplitVec(convPosVecY, 'equal', 'bracket', 'firstval');

spPosIndsY = spPosIndsY(2:(end-1), :);
spPosValY = spPosValY(2:(end-1), :);


% chunk data into bits based on value and make them the same length
posIdsX = unique(spPosValX);
posIdsY = unique(spPosValY);
spDatToPlot = cell(length(posIdsX), length(posIdsY));

for ii=1:length(posIdsY)
    tempIndsY = find(spPosValY == posIdsY(ii));
    
    for jj=1:length(posIdsX)
        tempIndsX = find(spPosValX(tempIndsY) == posIdsX(jj));
        relIntervals = spPosIndsX(tempIndsY(tempIndsX), :);
        minInt = min(relIntervals(:,2) - relIntervals(:,1));
    
        tempDatToPlot = zeros(length(tempIndsX), minInt+100+addSamp); % adds addSamp+100 sample before and after
        for kk=1:length(relIntervals)
            postAdd = addSamp - diff(relIntervals(kk, :)) + minInt;
            tempDatToPlot(kk, :) = datToPlot((relIntervals(kk, 1)-99):(relIntervals(kk, 2)+postAdd));
        end
    
        spDatToPlot{jj, ii} = tempDatToPlot;
        
    end    
end
    

% plotting the data

axhand = cell(size(spDatToPlot));

yyall = quantile(datToPlot, [0.001, 0.999])*10;

allNonEmpty = ~cellfun(@isempty, spDatToPlot);
maxPlot = max(sum(allNonEmpty));

prompt = {'Enter number of Columns'; 'Enter number of row'};
dlgtit = ['Max plots: ', num2str(maxPlot)]; 
userInput = inputdlg(prompt, dlgtit);
subplotSpecs = cellfun(@str2double, userInput)';

if (subplotSpecs(1)*subplotSpecs(2)) < maxPlot
    error('Columns and rows are too few')
end

posCell = generatePositionCell(0.05, 0.95, 0.05, 0.95, 0.02, 0.02, subplotSpecs);


for ii=1:length(posIdsY)
    
    figure
    plotInds = find(cellfun(@(x) ~isempty(x), spDatToPlot(:,ii)));
    relSpDat = spDatToPlot(plotInds, ii);
    
    if length(plotInds) == 1
        plot(relSpDat{1}'*10, 'color', [1 1 1]*0.8) % converts to mV
        hold on 
        plot(median(relSpDat{1})*10, 'color', 'r', 'linewidth', 2)
        hold off
        set(gca, 'xlim', [0, size(relSpDat{1}, 2)])
        set(gcf, 'name', ['Y value: ', num2str(posIdsY(ii))])
    else
    
        for jj=1:length(plotInds)
        
            axhand{jj, ii} = axes('position', posCell{jj});
        
            plot(relSpDat{jj}'*10, 'color', [1 1 1]*0.8) % converts to mV
            hold on 
            plot(mean(relSpDat{jj})*10, 'color', 'r', 'linewidth', 2)
            hold off
            set(gca, 'xlim', [0, size(relSpDat{jj}, 2)])
            title(num2str(posIdsX(jj+1)))
        end
        
        set(gcf, 'name', ['Y value: ', num2str(posIdsY(ii))])
        
    end
    
    
    
end

set([axhand{:}], 'ylim', yyall)

    
if nargout
    varargout{1} = axhand;
end



end


